import asyncio
import json
import logging
import os
import random
import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ChatAction
from aiogram.utils.keyboard import InlineKeyboardBuilder

API_TOKEN = "7296978470:AAFJSKyDEn32_vKHBTsNW1jvyGRtHhCkRVc"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

DATA_FILE = "users.json"
user_data = {}
pending_captcha = {}

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(user_data, f)

user_data = load_data()

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu(user_id):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")
    keyboard.button(text="‚õèÔ∏è –ú–∞–π–Ω–∏–Ω–≥", callback_data="mine")
    keyboard.button(text="üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞", callback_data="ref")
    keyboard.button(text="üõí –ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä–∞", callback_data="buy_miner")
    return keyboard.as_markup()

# --- –ö–∞–ø—á–∞ ---
async def send_captcha(user_id, message, referrer_id=None):
    a = random.randint(1, 5)
    b = random.randint(1, 5)
    answer = a + b
    options = [answer, answer + 1, answer - 1]
    random.shuffle(options)

    pending_captcha[str(user_id)] = {
        "answer": answer,
        "referrer_id": referrer_id
    }

    kb = InlineKeyboardBuilder()
    for opt in options:
        kb.button(text=str(opt), callback_data=f"captcha:{opt}")

    await message.answer(
        f"ü§ñ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç:\n–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {a} + {b}?",
        reply_markup=kb.as_markup()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏ ---
@dp.callback_query(F.data.startswith("captcha:"))
async def handle_captcha(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    selected = int(callback.data.split(":")[1])

    if user_id not in pending_captcha:
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚ö†Ô∏è –ö–∞–ø—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu(user_id))
        return

    correct = pending_captcha[user_id]["answer"]

    if selected == correct:
        ref_id = pending_captcha[user_id]["referrer_id"]
        del pending_captcha[user_id]

        if user_id not in user_data:
            user_data[user_id] = {
                "balance": 0,
                "status": "idle",
                "invited_by": None,
                "referrals": [],
                "miner_until": None
            }

        if ref_id and user_id != ref_id and user_data[user_id]["invited_by"] is None:
            user_data[user_id]["invited_by"] = ref_id
            user_data[user_id]["balance"] += 50

            if ref_id not in user_data:
                user_data[ref_id] = {
                    "balance": 0,
                    "status": "idle",
                    "invited_by": None,
                    "referrals": [],
                    "miner_until": None
                }

            user_data[ref_id]["referrals"].append(user_id)
            user_data[ref_id]["balance"] += 35

        save_data()

        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu(user_id))
        await callback.message.answer(
            "üö´ *–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞ Kivo:*\n\n"
            "üî∏ –ó–∞–ø—Ä–µ—â–µ–Ω—ã —Ñ–µ–π–∫–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –±–æ—Ç—ã –∏ –ª—é–±–∞—è —Ñ–æ—Ä–º–∞ –Ω–∞–∫—Ä—É—Ç–∫–∏.\n"
            "üî∏ –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ ‚Äî –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç.\n"
            "üî∏ –ù–∞—Ä—É—à–∏—Ç–µ–ª–∏ –±—É–¥—É—Ç *–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è*.\n\n"
            "üì¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ —á–µ—Å—Ç–Ω–æ –∏ —É–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö.",
            parse_mode="Markdown",
            reply_markup=main_menu(user_id)
        )
    else:
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start", reply_markup=main_menu(user_id))

    await callback.answer()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(F.text.startswith("/start"))
async def start(message: Message):
    user_id = str(message.from_user.id)
    args = message.text.split()
    referrer_id = str(args[1]) if len(args) > 1 else None
    await send_captcha(user_id, message, referrer_id)

# --- –ë–∞–ª–∞–Ω—Å ---
@dp.callback_query(F.data == "balance")
async def show_balance(callback):
    user_id = str(callback.from_user.id)
    await callback.message.edit_reply_markup(reply_markup=None)
    balance = user_data.get(user_id, {}).get("balance", 0)
    await callback.message.answer(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} Kivo", reply_markup=main_menu(user_id))
    await callback.answer()

# --- –ú–∞–π–Ω–∏–Ω–≥ ---
@dp.callback_query(F.data == "mine")
async def start_mining(callback):
    user_id = str(callback.from_user.id)
    await callback.message.edit_reply_markup(reply_markup=None)

    status = user_data.get(user_id, {}).get("status", "idle")
    if status == "mining":
        await callback.message.answer("‚õèÔ∏è –£–∂–µ –º–∞–π–Ω–∏—Ç–µ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=main_menu(user_id))
        await callback.answer()
        return

    now = datetime.datetime.utcnow().timestamp()
    miner_until = user_data.get(user_id, {}).get("miner_until")

    if not miner_until or now > miner_until:
        reward = random.randint(1, 5)
        user_data[user_id]["balance"] += reward
        save_data()
        await callback.message.answer(f"‚õèÔ∏è –í—ã –Ω–∞–º–∞–π–Ω–∏–ª–∏ {reward} Kivo –±–µ–∑ –º–∞–π–Ω–µ—Ä–∞.", reply_markup=main_menu(user_id))
        await callback.answer()
        return

    await callback.message.answer("üöÄ –ú–∞–π–Ω–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è... ‚õèÔ∏è", reply_markup=main_menu(user_id))
    user_data[user_id]["status"] = "mining"
    save_data()

    await bot.send_chat_action(callback.message.chat.id, ChatAction.TYPING)
    await asyncio.sleep(3)

    reward = 350
    user_data[user_id]["balance"] += reward
    user_data[user_id]["status"] = "idle"
    save_data()

    await callback.message.answer(f"‚úÖ –í—ã –Ω–∞–º–∞–π–Ω–∏–ª–∏ {reward} Kivo!", reply_markup=main_menu(user_id))
    await callback.answer()

# --- –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ ---
@dp.callback_query(F.data == "ref")
async def show_ref(callback):
    user_id = str(callback.from_user.id)
    await callback.message.edit_reply_markup(reply_markup=None)
    bot_username = (await bot.get_me()).username
    ref_link = f"https://t.me/{bot_username}?start={user_id}"
    referrals = user_data.get(user_id, {}).get("referrals", [])
    total_refs = len(referrals)

    await callback.message.answer(
        f"üë• –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{ref_link}\n\n"
        f"üè± –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç: 50 Kivo\n"
        f"üë§ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ: 35 Kivo –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞\n"
        f"üìà –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {total_refs} —á–µ–ª–æ–≤–µ–∫(–∞).",
        reply_markup=main_menu(user_id)
    )
    await callback.answer()

# --- –ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä–∞ ---
@dp.callback_query(F.data == "buy_miner")
async def show_miner_options(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–ö—É–ø–∏—Ç—å –º–∞–π–Ω–µ—Ä–∞ (30 –¥–Ω–µ–π)", callback_data="buy_30")
    await callback.message.answer("üõí –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=keyboard.as_markup())
    await callback.answer()

@dp.callback_query(F.data == "buy_30")
async def handle_buy_30(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: *30 –¥–Ω–µ–π / 19.5 USDT*\n\n"
        "üí≥ –ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ:\n\n"
        "<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <a href=\"https://nowpayments.io/payment/?iid=6238356498\">–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å</a>",
        parse_mode="HTML",
        reply_markup=main_menu(str(callback.from_user.id))
    )
    await callback.answer()

# --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message()
async def unknown(message: Message):
    user_id = str(message.from_user.id)
    await message.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=main_menu(user_id))

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
